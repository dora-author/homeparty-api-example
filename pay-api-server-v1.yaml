openapi: 3.0.0
info:
  version: '1.0.0'
  title: '토스페이먼츠 API 가이드'
  description: |
    <br>
    <h3>본 문서에 관하여</h3>
    토스페이먼츠 API 가이드는 [토스페이먼츠](https://www.tosspayments.com/)에서 제공하는 API에 대한 정보와 사용법을 설명한 문서입니다.
    
    <br>

    <h4>개정 이력</h4>
    | Version | Date         | Description     | Author      |
    | :------ | :----------- | :-------------- | :---------- |
    | 1.0.0   | 2022. 7. 18. | Initial release | Eunjung Kim |
    
    <br>

    
    <h4>대상 독자</h4>
    토스페이먼츠 API를 사용하는 클라이언트 측 개발자 혹은 사용자 
    
    <br>

    <h3>토스페이먼츠 API 소개</h3>
    토스페이먼츠 API는 클라이언트 측 개발자가 웹 애플리케이션 및 웹 서비스와 같은 소프트웨어에 토스페이먼츠에서 제공하는 서비스 및 기능를 적용하기 위해 사용하는 인터페이스입니다.
    토스페이먼츠 API는 Representational State Transfer(REST) API 형태로 제공되므로 HTTP 프로토콜을 통하여 클라이언트와 서버 간의 요청과 응답을 전달하는 방식으로 동작합니다.

    토스페이먼츠 API 가이드에서는 클라이언트 측 개발자가 각 API를 요청하고 응답을 받는데 필요한 정보로써, 아래와 같은 항목을 포함합니다. 
    * API에 관한 설명: API의 주요 기능
    * Uniform Resource Locator(URL): API를 요청하는 대상. 정보(자원)이 위치하는 서버 측 경로.
    * HTTP Method(메서드): API 요청에 대해 서버 측에서 정보(자원)을 처리하는 동작. GET(조회), POST(생성), PUT(수정), PATCH(일부 수정), DELETE(삭제)가 있음.
    * API 요청 시 전송 데이터:
      * 파라미터 및 본문 데이터의 타입
      * 각 구성 파라미터 및 본문 데이터의 속성, 타입, 설명
      * 샘플 요청
    * API 요청 후 서버로부터 받는 응답 데이터:
      * 본문 데이터의 타입
      * 각 구성 데이터의 속성, 타입, 설명
      * 샘플 응답
      * 각 응답 상태 코드에 대한 설명

    *- Note: 위 정보는 본 가이드에서 제공하는 토스페이먼츠 각 API별 섹션에서 상세히 다룹니다.*      

    *- Note: 'API를 요청한다'는 의미는 'API를 통하여 클라이언트 측 요청 메시지(요청)를 서버에 전송한다'는 의미와 같습니다. 이 요청에는 서버 측 URL 및 HTTP 메서드, 요청 파라미터 및 본문 데이터를 포함합니다.
    반대로 서버로부터 받는 응답 메시지(응답)에는 API 요청에 대한 서버의 처리 결과에 해당하는 응답 데이터를 포함합니다.*
    
    <br>

    <h3>토스페이먼츠 API 사용하기</h3>
    토스페이먼츠 API를 직접 요청해보고 서버로부터 응답을 확인하는 방식으로 토스페이먼츠 API를 사용해볼 수 있습니다.
    [**cURL**](https://curl.se/)과 같은 커맨드 라인 기반 데이터 전송 도구를 이용하여 API 요청을 보내고 가이드에 명시된 샘플 응답과 같이 출력되는지 확인할 수 있습니다. 또는 본 가이드에서 제공하는 `Try it out` 기능을 통해 가이드 페이지에서 샘플 API 요청을 서버로 직접 전송하고 서버로부터의 응답을 바로 확인할 수 있습니다.

    <h4>API 요청 및 서버 응답 개선하기</h4>
    **cURL**을 이용하여 API를 요청하고 서버 응답을 확인할 경우 아래의 방법을 통해 보다 정확하고 명확한 결과를 얻을 수 있습니다.
    - 요청 본문 데이터를 큰따옴표 `"`가 아닌 작은따옴표 `'`로 묶습니다. 본문 데이터를 큰따옴표 `"`로 묶는 경우 숫자 타입 데이터에 대하여 구분 분석 오류가 발생합니다.
    - 응답 본문 데이터의 가독성을 높이기 위해 요청 명령어 작성 시 **cURL** 옵션인 `-L`과 명령문 맨 끝에 `| jq .` 명령어를 사용합니다.

      *- Note: `jq` 패키지가 없을 경우 `sudo apt-get install jq` 명령어를 통해 설치합니다.*
    - **cURL** 옵션인 `-v`을 사용하면 요청에 대한 응답 본문 데이터 뿐만 아니라 요청 및 응답의 헤더 데이터도 확인할 수 있습니다. 헤더 데이터에는 HTTP 메서드, 요청 대상(URL), HTTP 버전, HTTP 상태 코드와 같은 요청 및 응답과 관련한 부가 정보가 포함됩니다.

    *- Note: 위 방법은 **Linux** OS 기준입니다.*

    <br>

    <h4>API 샘플 요청 및 응답 확인</h4>
    
    **cURL**을 이용한 API 요청은 아래와 같습니다. 
    ```
    curl -L -s -v -X 'POST' -H 'Content-Type: application/json' -H 'accept: application/json' 'https://tech-writer-assignment.herokuapp.com/payments' -d '{
    "card": {
    "brand": "BC",
    "number": "5464650123268072",
    "expiry": "1124",
    "cvc": "123"
    },
    "amount": 2000,
    "description": "토스팀 맨투맨 구매"
    }' | jq .
    ```
    *- Note: 위 요청은 **Linux** OS 기준으로 작성되었습니다. **Linux** OS에는 **cURL**이 기본적으로 설치되어 있어 터미널에서 바로 해당 요청을 보낼 수 있습니다.*
    
    <br>

    **cURL**을 이용한 API 요청에 대한 서버로부터의 응답은 아래와 같습니다.
    ``` curl
    } [5 bytes data]
    > POST /payments HTTP/1.1
    > Host: tech-writer-assignment.herokuapp.com
    > User-Agent: curl/7.58.0
    > Content-Type: application/json
    > accept: application/json
    > Content-Length: 142
    >
    } [142 bytes data]
    * upload completely sent off: 142 out of 142 bytes
    { [5 bytes data]
    < HTTP/1.1 200 OK
    < Server: Cowboy
    < Connection: keep-alive
    < X-Powered-By: Express
    < Content-Type: application/json; charset=utf-8
    < Content-Length: 229
    < Etag: W/"e5-QEIhHt/tIRcHYj/Z4mYoAb/LnJo"
    < Date: Mon, 18 Jul 2022 11:16:31 GMT
    < Via: 1.1 vegur
    <
    { [229 bytes data]
    * Connection #0 to host tech-writer-assignment.herokuapp.com left intact
    {
      "id": "pm__19XJJ02eZvKYlo2ClwuJ1rbA",
      "result": "SUCCESS",
      "createdAt": "2022-07-18T11:16:31.453Z",
      "data": {
        "card": {
          "brand": "BC",
          "number": "5464650123268072",
          "expiry": "1124",
          "cvc": "123"
        },
        "amount": 2000,
        "description": "토스팀 맨투맨 구매"
      }
    }
    ```
    <br>

    <h4>HTTP 상태 코드</h4>
    API 요청에 대한 서버로부터의 응답 중 HTTP 상태 코드를 통해 서버의 응답 상태를 확인할 수 있습니다.
    주요 HTTP 상태 코드에 대한 설명은 아래와 같습니다.
    | 상태 코드 | 설명 |
    | :-------- | :----------- |
    | `200` OK | 요청을 성공적으로 처리한 상태입니다. |
    | `400` Bad Request | 잘못된 요청으로 요청을 처리할 수 없는 상태입니다.|
    | `403` Forbidden | 요청하는 사용자의 권한 문제로 요청을 거부한 상태입니다. |
    | `404` Not Found | 요청하는 정보(자원)가 존재하는 않아 서버가 찾을 수 없는 상태입니다. |
    | `500` Server Error | 서버에 오류가 발생하여 서버가 요청을 처리할 수 없는 상태입니다. |

servers:
  - url: https://tech-writer-assignment.herokuapp.com
    description: 토스페이먼츠 API 서버
  - url: https://api.nuriflex.co.kr/api-server/v1
    description: NuriFlex API 서버
  - url: https://search.nuriflex.co.kr/elastic
    description: Elasticsearch API 서버


tags:
  - name: 결제 API 
    
    description: |
      결제 API는 토스페이먼츠에서 제공하는 결제 기능을 클라이언트 측 웹 서비스 및 웹 애플리케이션에 적용할 수 있도록 클라이언트 측 요청과 이에 대한 서버 측 응답을 전달해주는 인터페이스입니다.
      

  #- name: API Samples
  #  description: API Samples는 고객이 클라이언트의 결제시스템을 통해 제품을 결제할 때 필요한 요청과 응답을 전달해주는 인터페이스입니다. 

# Paths
paths:
  /payments:
    post:
      summary: 카드 정보로 결제하기 API
      tags:
        - 결제 API
      description:  |
        카드 정보로 결제하는 기능에 대한 요청과 응답을 전달하는 인터페이스입니다. 카드 정보 및 구매 정보를 본문 데이터로 전송하여 API를 요청하고 서버로부터 결제 처리에 대한 응답 데이터를 받을 수 있습니다.

      requestBody:
        description: 카드 정보로 결제하기 API 요청 시 전송하는 본문 데이터입니다.
          요청 본문 데이터 중 `description` 을 제외한 나머지 데이터 속성들은 필수로 전송해야 합니다.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestCardInfo' 
      responses:
        '200':
          description: 카드 정보로 결제하기 API 요청에 대하여 결제가 정상적으로 처리됨
          content:
            application/json:
              schema:
                #type: array #array 타입이 아니므로 items까지 주석처리
                #items:
                $ref: '#/components/schemas/ResponsePayInfo'
        '400':
          description: 카드 정보로 결제하기 API 요청에 대하여 전송해야할 필수 데이터가 누락되거나 잘못된 데이터 형식으로 요청을 처리할 수 없어 결제에 실패함
          #type: array
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/ReqFailA'
                - $ref: '#/components/schemas/ReqFailB'    
              example: 
                result: 결제 실행 결과
                code: 에러 코드
                message: 상세 에러 메시지
#
# Components
components:
  schemas:
    ResponsePayInfo:
      type: object
      description: 결제 처리 정보
      properties:
        id:
          type: string
          description: 결제 ID
        result:
          type: string
          description: 결제 처리 결과
        createdAt:
          type: string
          # nullable: true
          description: 결제가 처리된 시간
        data:
          description: API 요청 시 전송 데이터
          $ref: '#/components/schemas/RequestCardInfo'
      example:
        id: pm__19XJJ02eZvKYlo2ClwuJ1rbA
        result: SUCCESS
        createdAt: 2020-03-20T12:03:31.991Z
    RequestCardInfo:
      type: object
      description: 카드 정보로 결제하기 API 요청 시 전송하는 본문 데이터 속성
      properties:
        card:
          type: object
          description: 결제 카드 정보
          required: true #내부 객체 데이터 모두 필수이므로
          properties:
            brand:
              type: string
              description: 카드사 명
              example: BC
            number:
              type: string
              description: 카드 번호
              example: 5464650123268072
            expiry:
              type: string
              description:  카드 유효 기간(MMYY)
              example: 1124
            cvc:
              type: string
              description: 카드 인증 코드(카드 뒷면 세자리 숫자)
              example: 123
              # $ref: '#/components/schemas/UserInfo'
        amount:
          type: integer
          description: 결제 총금액
          example: 2000
        description:  
          type: string
          description: 결제 대상에 대한 설명
          example: 토스팀 맨투맨 구매
      required:
        - card
        - amount
    # UserInfo:
    #   type: object
    #   description: 결제 카드 정보
    #   required: true #내부 객체 데이터 모두 필수이므로
    #   properties:
    #     brand:
    #       type: string
    #       description: 카드사 명
    #     number:
    #       type: string
    #       description: 카드 번호
    #     expiry:
    #       type: string
    #       description:  카드 유효 기간(MMYY)
    #     cvc:
    #       type: string
    #       description: 카드 인증 코드(카드 뒷면 세자리 숫자)
    #   example:
    #     brand: BC
    #     number: 5464650123268072
    #     expiry: 1124
    #     cvc: 123
    # AuthInfo:
    #   type: object
    #   description: API 요청 시 전송 데이터
    #   properties:
    #     card:
    #       description: 결제 카드 정보
    #       $ref: '#/components/schemas/UserInfo'
    #     amount:
    #       type: integer
    #       description: 결제 총금액
    #       example: 2000
    #     description:
    #       type: string
    #       description: 결제 대상에 대한 설명
    #       example: 토스팀 맨투맨 구매
    ReqFailA:
      type: object
      description: 요청 본문 데이터 중 `amount` 속성을 누락하고 전송하여 요청에 실패한 경우 에러 응답
      properties: 
        result:
          type: string
          description: 결제 처리 결과
          example: FAILED
        code:
          type: string
          description: 에러 코드
          example: MISSING_PARAMETER
        message:
          type: string
          description: 상세 에러 메시지
          example: amount 속성이 누락되었습니다.
    ReqFailB:
      type: object
      description: card.cvc 타입을 `number`로 전송하여 요청에 실패한 경우 에러 응답
      properties: 
        result:
          type: string
          description: 결제 처리 결과
          example: FAILED
        code:
          type: string
          description: 에러 코드
          example: INVALID_PARAMETER
        message:
          type: string
          description: 상세 에러 메시지
          example: card.cvc 타입은 `string`으로 전송해야 합니다.

  # securitySchemes:
    #NuriFlexAuth:
    #   type: http
    #   scheme: basic
    #   bearerFormat: JWT

    #ElasticAuth:
    #  type: http
    #  scheme: basic

  responses:
    BadRequest:
      description: 필수 정보가 누락된 잘못된 요청
    UnauthorizedError:
      description: 인증 받지 못한 상태이거나 잘못된 인증 요청. '/auth'를 먼저 호출해 주세요.
    Forbidden:
      description: 권한 없음
    NotFound:
      description: 찾지 못함

#
# security
# security:
#  - ElasticAuth: []
